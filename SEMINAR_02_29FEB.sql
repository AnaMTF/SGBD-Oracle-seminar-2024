-- 29/02/2024 Seminar 2

-- FUNDAMENTAL CONTROL STRUCTURES:
-- SEQUENTIAL, DECISIONAL & REPETITIVE (LOOP) STRUCTURES.
-- DECISIONAL: IF, CASE
-- REPETITIVE: KNOWN NO. OF STEPS: FOR
--           UNKNOWN NO. OF STEPS: WHILE, LOOP
-- PL/SQL IMPLEMENTS THREE VALUE LOGIC (3VL): TRUE/FALSE/NULL
-- IN OPERATII DE COMPARATIE, ORICE COMPARATIE CU `NULL` ESTE EGALA CU `NULL`
-- OBSERVATIE:
-- `:=` ASSIGNMENT OPERATOR
-- ` =` COMPARISON OPERATOR
-- `==` NU EXISTA

-- SET SERVEROUTPUT ON

DECLARE
    VGRADE NUMBER; -- INITIALIZARE

BEGIN
    VGRADE := 10;

    IF VGRADE IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('VARIABLE NOT INITIALIZED');
    ELSIF VGRADE < 1 OR VGRADE > 10 THEN
        DBMS_OUTPUT.PUT_LINE('WRONG INPUT');
    ELSIF VGRADE = 10 THEN
        DBMS_OUTPUT.PUT_LINE('PASSED');
        DBMS_OUTPUT.PUT_LINE('CONGRATULATIONS! YOU WIN A PRIZE!');
    ELSIF VGRADE >= 5 THEN
        DBMS_OUTPUT.PUT_LINE('PASSED');
        DBMS_OUTPUT.PUT_LINE('CONGRATULATIONS!');
    ELSE
        DBMS_OUTPUT.PUT_LINE('FAILED');
        DBMS_OUTPUT.PUT_LINE('STUDY HARDER NEXT TIME!');
    END IF;
    
    CASE
        WHEN VGRADE IS NULL
        THEN DBMS_OUTPUT.PUT_LINE('VARIABLE NOT INITIALIZED');
        
        WHEN VGRADE < 1 OR VGRADE > 10
        THEN DBMS_OUTPUT.PUT_LINE('WRONG INPUT');
        
        WHEN VGRADE = 10
        THEN DBMS_OUTPUT.PUT_LINE('PASSED');
             DBMS_OUTPUT.PUT_LINE('CONGRATULATIONS! YOU WIN A PRIZE!');
            
        WHEN VGRADE >= 5
        THEN DBMS_OUTPUT.PUT_LINE('PASSED');
             DBMS_OUTPUT.PUT_LINE('CONGRATULATIONS!');
        
        ELSE DBMS_OUTPUT.PUT_LINE('FAILED');
             DBMS_OUTPUT.PUT_LINE('STUDY HARDER NEXT TIME!');
    END CASE;
    
    CASE
    WHEN VGRADE IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('VARIABLE NOT INITIALIZED');
    WHEN VGRADE < 1 OR VGRADE > 10 THEN
        DBMS_OUTPUT.PUT_LINE('WRONG INPUT');
    WHEN VGRADE = 10 THEN
        DBMS_OUTPUT.PUT_LINE('PASSED');
        DBMS_OUTPUT.PUT_LINE('CONGRATULATIONS! YOU WIN A PRIZE!');
    WHEN VGRADE >= 5 THEN
        DBMS_OUTPUT.PUT_LINE('PASSED');
        DBMS_OUTPUT.PUT_LINE('CONGRATULATIONS!');
    ELSE
        DBMS_OUTPUT.PUT_LINE('FAILED');
        DBMS_OUTPUT.PUT_LINE('STUDY HARDER NEXT TIME!');
    END CASE;
    
END;
/

DECLARE
    VGRADE NUMBER(2):=6; -- INITIALIZARE
    -- `VGRADE NUMBER(2) DEFAULT 7;` -- ECHIVALENT
    
BEGIN
    IF VGRADE < 1 OR VGRADE > 10 THEN
        DBMS_OUTPUT.PUT_LINE('WRONG INPUT');
    ELSE
        IF VGRADE >= 5 THEN
            DBMS_OUTPUT.PUT_LINE('PASSED');
            DBMS_OUTPUT.PUT_LINE('CONGRATULATIONS!');
            IF VGRADE <= 7 THEN
                DBMS_OUTPUT.PUT_LINE('HOWEVER, YOU COULD HAVE DONE BETTER!');
            END IF;            
        ELSE
            DBMS_OUTPUT.PUT_LINE('FAILED');
            DBMS_OUTPUT.PUT_LINE('STUDY HARDER NEXT TIME!');
        END IF;
    END IF;

END;
/

DECLARE
    VFIRSTNAME VARCHAR(30);
    VLASTNAME  VARCHAR(30);

BEGIN
    -- necesita cel putin un statement, macar `NULL`
    NULL;
    SELECT
        FIRST_NAME, LAST_NAME
    INTO -- `INTO` este necesar in PL\SQL
        VFIRSTNAME, VLASTNAME
    FROM
        EMPLOYEES
    WHERE
        EMPLOYEE_ID = 206;
            
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE FOUND: '||VFIRSTNAME||' '||VLASTNAME);
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN DBMS_OUTPUT.PUT_LINE('THE EMPLOYEE DOESN''T EXIST.'); -- DUBLU APOSTROF IN STRING
        
        WHEN TOO_MANY_ROWS
        THEN DBMS_OUTPUT.PUT_LINE('THE SELECT RETURNS MORE THAN ONE EMPLOYEE.');
        
        WHEN OTHERS -- SHOULD ALWAYS BE THE LAST OPTION, OTHERWISE IT WILL CAUSE A COMPILATION ERROR.
        THEN DBMS_OUTPUT.PUT_LINE('ANOTHER EXCEPTION: '||SQLERRM);
    
END;
/

-- DISPLAY THE EMPLOYEES WHO HAVE AT LEAST ONE ORDER (ACTUALLY ARE SALES REPS??)
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID IN (SELECT SALES_REP_ID FROM ORDERS);
    
-- DISPLAY THE EMPLOYEES WHO ARE NOT SALES REPS.
-- PENTRU CA SE COMPARA CU `NULL`, NU SE AFISEAZA NIMICA
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID NOT IN (SELECT SALES_REP_ID FROM ORDERS);
    