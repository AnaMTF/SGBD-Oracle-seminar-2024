-- 04/04/2024 Seminar 7

-- SET SERVEROUTPUT ON

DECLARE
    -- CURSOR WITH PARAMETERS
    -- NEVER USE SIZE, JUST THE TYPE
    CURSOR C(P_ID NUMBER) IS 
        SELECT
            FIRST_NAME, LAST_NAME, DEPARTMENT_ID
        FROM
            EMPLOYEES
        WHERE
            DEPARTMENT_ID = P_ID;

    CURSOR D IS 
        SELECT
            E.DEPARTMENT_ID 
        FROM
            DEPARTMENTS D 
        LEFT JOIN
            EMPLOYEES E 
        ON
            D.DEPARTMENT_ID = E.DEPARTMENT_ID
        GROUP BY
            E.DEPARTMENT_ID, DEPARTMENT_NAME
        ORDER BY
            COUNT(EMPLOYEE_ID) DESC;

    V_ID NUMBER;   
    R C%ROWTYPE;
BEGIN
    NULL;
    
    OPEN D;
    FETCH D INTO V_ID;
    CLOSE D;
    
    OPEN C(V_ID);
    LOOP
        FETCH C INTO R;
        EXIT WHEN C%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(R.FIRST_NAME || ' ' || R.LAST_NAME);
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('THIS DEPARTMENT HAS ' || C%ROWCOUNT || ' EMPLOYEES');
    CLOSE C;
    
    FOR R IN C(V_ID) LOOP
        DBMS_OUTPUT.PUT_LINE(R.FIRST_NAME || ' ' || R.LAST_NAME);
    END LOOP;
    
    -- DBMS_OUTPUT.PUT_LINE('THIS DEPARTMENT HAS ' || C%ROWCOUNT || ' EMPLOYEES');
    -- CURSORUL ESTE DESCHIS SI INCHIS IN INTERIORUL FOR LOOP. C%ROWCOUNT NU MAI POATE FI ACCESAT.
END;
/

-- USING THE CURSOR DISPLAY THE EMPLOYEES FROM THE DEPARTMENT WITH THE GREATEST NUMBER OF EMPLOYEES
-- THESE EMPLOYEES WILL ALSO GET A 5% SALARY INCREASE
-- CURSOR WITH FOR UPDATE

DECLARE
    -- CURSOR WITH PARAMETERS
    -- NEVER USE SIZE, JUST THE TYPE
    CURSOR C(P_ID NUMBER) IS 
        SELECT
            FIRST_NAME, LAST_NAME, DEPARTMENT_ID, SALARY
        FROM
            EMPLOYEES
        WHERE
            DEPARTMENT_ID = P_ID
        ORDER BY
            SALARY DESC
        FOR UPDATE
        NOWAIT; -- NOWAIT/WAIT X (SECONDS)

    CURSOR D IS 
        SELECT
            E.DEPARTMENT_ID 
        FROM
            DEPARTMENTS D 
        LEFT JOIN
            EMPLOYEES E 
        ON
            D.DEPARTMENT_ID = E.DEPARTMENT_ID
        GROUP BY
            E.DEPARTMENT_ID, DEPARTMENT_NAME
        ORDER BY
            COUNT(EMPLOYEE_ID) DESC;

    V_ID NUMBER;   
    R C%ROWTYPE;
    
    ROWS_ARE_LOCKED EXCEPTION;
    PRAGMA EXCEPTION_INIT(ROWS_ARE_LOCKED, -30006);
    
BEGIN
    OPEN D;
    FETCH D INTO V_ID;
    CLOSE D;
    
    
    -- UPDATE EMPLOYEES SET SALARY=SALARY*1.05 WHERE DEPARTMENT_ID = V_ID;
    
    -- OPEN C(30); -- EXCEPTION TRIGGER
    
    FOR R IN C(V_ID) LOOP
        DBMS_OUTPUT.PUT_LINE(UPPER(R.FIRST_NAME) || ' ' || UPPER(R.LAST_NAME) || ' HAS A SALARY OF ' || R.SALARY);
        UPDATE EMPLOYEES SET SALARY = SALARY*1.05 WHERE CURRENT OF C;
    END LOOP;
    
    -- PENTRU A BLOCA TABELUL, MAI FACEM UN WORKSHEET
    
    -- DBMS_OUTPUT.PUT_LINE('THIS DEPARTMENT HAS ' || C%ROWCOUNT || ' EMPLOYEES');
    -- CURSORUL ESTE DESCHIS SI INCHIS IN INTERIORUL FOR LOOP. C%ROWCOUNT NU MAI POATE FI ACCESAT.
    
    -- EXCEPTIONS EXAMPLES
    -- DBMS_OUTPUT.PUT_LINE('THIS DEPARTMENT HAS ' || C%ROWCOUNT || ' EMPLOYEES'); -- EXCEPTION TRIGGER
    EXCEPTION
        WHEN INVALID_CURSOR THEN
            DBMS_OUTPUT.PUT_LINE('WE CAN''T USE A CLOSED CURSOR');
        WHEN CURSOR_ALREADY_OPEN THEN
            DBMS_OUTPUT.PUT_LINE('THIS CURSOR IS ALREADY OPEN'); -- IF AN EXCEPTION IS RAISED, NO OTHER FURTHER STATEMENT IS EXECUTED.
        WHEN ROWS_ARE_LOCKED THEN
            DBMS_OUTPUT.PUT_LINE('THE ROWS ARE LOCKED');
END;
/

-- LAST TOPIC BEFORE FUNCTIONS/PROCEDURS
-- EXCEPTIONS -> PREDEFINED/NON-PREDEFINED/USER-DEFINED
-- EXAMPLES: NO_DATA_FOUND, TOO_MANY_ROWS, VALUE_ERROR

ROLLBACK;